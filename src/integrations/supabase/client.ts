
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import logger from '@/utils/logger';

// Constants with fallbacks for instantiation
const SUPABASE_URL = "https://dczsjvcgjxqgjdihonfj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRjenNqdmNnanhxZ2pkaWhvbmZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzODQyOTgsImV4cCI6MjA2MDk2MDI5OH0.X2nlf1EWQodx3XxDNoNVHcO3UdoKtMAD8pMiVSvAbik";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Enhanced client configuration with robust auth settings
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      // New settings for better security and error handling
      detectSessionInUrl: true,
      flowType: 'pkce',
      // Debug mode off in production
      debug: import.meta.env.DEV,
    },
    global: {
      // Add headers for better traceability
      headers: {
        'X-Client-Info': 'math-game-web',
      },
    }
  }
);

// Centralized auth event listener to avoid multiple redundant listeners
try {
  const uniqueClientId = `client_${Math.random().toString(36).substring(2)}`;
  logger.debug(`Setting up global auth listener: ${uniqueClientId}`);
  
  supabase.auth.onAuthStateChange((event, session) => {
    logger.debug(`Global auth event: ${event}, user: ${session?.user?.id || 'none'}, client: ${uniqueClientId}`);
    
    // On signout, clean up local storage
    if (event === 'SIGNED_OUT') {
      try {
        // Clear any cached data on signout
        localStorage.removeItem('math_game_active_profile');
        sessionStorage.removeItem('PROFILE_SWITCHER_SHOWN_KEY');
        logger.info('User signed out, cleared local storage cache');
      } catch (err) {
        logger.warn('Error clearing cache on signout:', err);
      }
    }
    
    // On token refresh, log it
    if (event === 'TOKEN_REFRESHED') {
      logger.debug('Auth token refreshed successfully');
    }
    
    // On session errors, log them
    if (event === 'USER_UPDATED' || event === 'PASSWORD_RECOVERY') {
      logger.debug(`Auth event: ${event} processed`);
    }
  });
} catch (err) {
  logger.error('Error setting up auth listener:', err);
}

// Export a function to get a fresh client if needed
export const getSupabaseClient = () => {
  logger.debug('Creating new Supabase client instance');
  return createClient<Database>(
    SUPABASE_URL,
    SUPABASE_PUBLISHABLE_KEY,
    {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        flowType: 'pkce',
        debug: import.meta.env.DEV,
      },
    }
  );
};
